Name      : Shahriar Ahmed 
Section   : 04
ID        : 20101588 
Topic     : Key Index Searching & Sorting, Hashing     
Assignment: Lab6 - Key Index Searching & Sorting, Hashing  




###Task-1:


class KeyIndex:
    def __init__(self, list1):
        self.list = list1

    def search(self, value):
        n1 = len(self.list)
        max_element = self.list[0]
        for i in range(1, n1):
            if self.list[i] > max_element:
                max_element = self.list[i]
        min_element = self.list[0]
        for i in range(1, n1):
            if self.list[i] < min_element:
                min_element = self.list[i]

        range_of_elements = max_element - min_element + 1
        count_list = [0 for _ in range(range_of_elements)]
        output_list = [0 for _ in range(len(self.list))]
        for i in range(0, n1):
            count_list[self.list[i] - min_element] += 1
        for i in range(1, len(count_list)):
            count_list[i] += count_list[i - 1]

        for i in range(n1 - 1, -1, -1):
            output_list[count_list[self.list[i] - min_element] - 1] = self.list[i]
            count_list[self.list[i] - min_element] -= 1

        for i in range(0, n1):
            self.list[i] = output_list[i]

        if count_list[value + (min_element*(-1))] >= 1:
            return True
        else:
            return False

    def sort(self):
        n1 = len(self.list)
        max_element = self.list[0]
        for i in range(1, n1):
            if self.list[i] > max_element:
                max_element = self.list[i]
        min_element = self.list[0]
        for i in range(1, n1):
            if self.list[i] < min_element:
                min_element = self.list[i]

        range_of_elements = max_element - min_element + 1
        count_list = [0 for _ in range(range_of_elements)]
        output_list = [0 for _ in range(len(self.list))]
        for i in range(0, n1):
            count_list[self.list[i] - min_element] += 1
        for i in range(1, len(count_list)):
            count_list[i] += count_list[i - 1]

        for i in range(n1 - 1, -1, -1):
            output_list[count_list[self.list[i] - min_element] - 1] = self.list[i]
            count_list[self.list[i] - min_element] -= 1

        for i in range(0, n1):
            self.list[i] = output_list[i]

        return self.list

arr = KeyIndex([-5, -10, 5, 0, 8, -3, 8, 5, -1, 10, -5])
print("Sorted Array or List by Key Indexed Sorting is: ")
print(arr.sort())
print(arr.search(10))




###Task-2:


def hash_function(combo):
    value = 0
    characters = 0
    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    vowels = ['A', 'E', 'I', 'O', 'U']
    consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y','Z']
    con_combo = ""

    for i in combo:
        if i not in vowels:
            con_combo += i

    for i in con_combo:

        if i in digits:
            value = value + int(i)
        if i in consonants:
            characters = characters + 1
    index = ((characters * 24) + value) % 9
    print(index)

    hash_arr = [0] * 9
    if hash_arr[index] == 0:
        hash_arr[index] = combo
    else:
        while (True):
            index = (index + 1) % len(hash_arr)
            if hash_arr[index] == 0:
                hash_arr[index] = combo
            break
    print(hash_arr)


hash_function('ST1E89B8A32')